import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, Injector, PLATFORM_ID } from '@angular/core';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { CoreService } from '../config/core.service';
import { Logger } from '../logger/logger.service';
import * as i0 from "@angular/core";
export class ApiRequestOptions {
    constructor(params) {
        this.headers = new HttpHeaders({
            'Content-Type': 'application/json'
        });
        this.params = params;
    }
}
export class ApiService {
    constructor(injector) {
        this.injector = injector;
    }
    get collection() {
        return '/api';
    }
    get logger() {
        if (!this._logger) {
            this._logger = this.injector.get(Logger);
        }
        return this._logger;
    }
    get http() {
        if (!this._http) {
            this._http = this.injector.get(HttpClient);
        }
        return this._http;
    }
    get state() {
        if (!this._state) {
            this._state = this.injector.get(TransferState);
        }
        return this._state;
    }
    get platformId() {
        if (!this._platformId) {
            this._platformId = this.injector.get(PLATFORM_ID);
        }
        return this._platformId;
    }
    get config() {
        if (!this._config) {
            this._config = this.injector.get(CoreService).options;
        }
        return this._config;
    }
    get origin() {
        if (!this._origin) {
            this._origin = this.config.origin;
        }
        return this._origin;
    }
    get url() {
        let base = this.origin;
        const collection = this.collection.toLowerCase();
        if (collection.indexOf('http') === 0) {
            base = '';
        }
        return `${base}${collection}`;
    }
    getUrl(method = '') {
        return `${this.url}${method}`;
    }
    get(first, second) {
        const method = (typeof first === 'string' ? first : '');
        const params = (typeof first === 'object' ? first : second);
        const url = this.getUrl(method);
        const options = new ApiRequestOptions(params);
        return this.http.get(url, options).pipe(tap(x => this.logger.request(url)));
    }
    post(first, second, third) {
        const method = (typeof first === 'string' ? first : '');
        const model = (typeof first === 'object' ? first : second);
        const params = (typeof second === 'object' ? second : third);
        const url = this.getUrl(method);
        const options = new ApiRequestOptions(params);
        return this.http.post(url, model, options).pipe(tap(x => this.logger.request(url)));
    }
    put(first, second, third) {
        const method = (typeof first === 'string' ? first : '');
        const model = (typeof first === 'object' ? first : second);
        const params = (typeof second === 'object' ? second : third);
        const url = this.getUrl(method);
        const options = new ApiRequestOptions(params);
        return this.http.put(url, model, options).pipe(tap(x => this.logger.request(url)));
    }
    patch(first, second, third) {
        const method = (typeof first === 'string' ? first : '');
        const model = (typeof first === 'object' ? first : second);
        const params = (typeof second === 'object' ? second : third);
        const url = this.getUrl(method);
        const options = new ApiRequestOptions(params);
        return this.http.patch(url, model, options).pipe(tap(x => this.logger.request(url)));
    }
    delete(first, second, third) {
        const method = (typeof first === 'string' ? first : '');
        const identity = (typeof first !== 'string' ? first : second);
        const id = identity ? (typeof identity === 'number' ? identity : identity.id) : null;
        const params = (typeof second === 'object' ? second : third);
        const url = id !== null ? this.getUrl(`${method}/${id}`) : this.getUrl(method);
        const options = new ApiRequestOptions(params);
        return this.http.delete(url, options).pipe(tap(x => this.logger.request(url)));
    }
    toCamelCase(input) {
        let output, key, keyCamelCase, value;
        if (input instanceof Array) {
            return input.map((value) => {
                if (typeof value === 'object') {
                    value = this.toCamelCase(value);
                }
                return value;
            });
        }
        else {
            output = {};
            for (key in input) {
                if (input.hasOwnProperty(key)) {
                    keyCamelCase = (key.charAt(0).toLowerCase() + key.slice(1) || key).toString();
                    value = input[key];
                    if (value instanceof Array || (value !== null && value.constructor === Object)) {
                        value = this.toCamelCase(value);
                    }
                    output[keyCamelCase] = value;
                }
            }
        }
        return output;
    }
    // TRANSFER STATE
    getStateKey(url, model) {
        const flatMap = (s, x) => {
            if (typeof x === 'number') {
                s += x.toString();
            }
            else if (typeof x === 'string') {
                s += x.substr(0, 10);
            }
            else if (x && typeof x === 'object') {
                s += '_' + Object.keys(x).map(k => k + '_' + flatMap('', x[k])).join('_');
            }
            return s;
        };
        url = flatMap(url, model);
        // console.log('ApiService.getStateKey.url', url);
        const key = url.replace(/(\W)/gm, '_');
        // this.logger.log('ApiService.getStateKey.key', key);
        return makeStateKey(key);
    }
    stateGet(first, second) {
        const method = (typeof first === 'string' ? first : '');
        const params = (typeof first === 'object' ? first : second);
        const url = this.getUrl(method);
        const options = new ApiRequestOptions(params);
        const stateKey = this.getStateKey(url, params);
        if (isPlatformBrowser(this.platformId) && this.state.hasKey(stateKey)) {
            const cached = this.state.get(stateKey, null);
            this.state.remove(stateKey);
            return of(cached);
        }
        else {
            return this.http.get(url, options).pipe(tap(x => {
                if (isPlatformServer(this.platformId)) {
                    this.state.onSerialize(stateKey, () => x);
                }
            }));
        }
    }
    statePost(first, second, third) {
        const method = (typeof first === 'string' ? first : '');
        const model = (typeof first === 'object' ? first : second);
        const params = (typeof second === 'object' ? second : third);
        const url = this.getUrl(method);
        const options = new ApiRequestOptions(params);
        const stateKey = this.getStateKey(url, model);
        if (isPlatformBrowser(this.platformId) && this.state.hasKey(stateKey)) {
            const cached = this.state.get(stateKey, null);
            this.state.remove(stateKey);
            return of(cached);
        }
        else {
            return this.http.post(url, model, options).pipe(tap(x => {
                if (isPlatformServer(this.platformId)) {
                    this.state.onSerialize(stateKey, () => x);
                }
            }));
        }
    }
}
ApiService.ɵfac = function ApiService_Factory(t) { return new (t || ApiService)(i0.ɵɵinject(i0.Injector)); };
ApiService.ɵprov = i0.ɵɵdefineInjectable({ token: ApiService, factory: ApiService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,