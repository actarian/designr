import { EventEmitter, Injectable, Injector } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, debounceTime, filter, map, switchMap, tap } from 'rxjs/operators';
import { ApiService } from '../api/api.service';
import * as i0 from "@angular/core";
export class LabelKey {
}
export class LabelService extends ApiService {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.keys = {};
        this.values$ = new BehaviorSubject({});
        this.emitter$ = new EventEmitter();
    }
    get collection() {
        return '/api/label';
    }
    transform(key, defaultValue, params) {
        const values = this.values$.getValue();
        if (values.hasOwnProperty(key)) {
            return this.parseLabel(values[key], params);
        }
        else if (!this.keys.hasOwnProperty(key)) {
            values[key] = null;
            Object.defineProperty(this.keys, key, {
                value: { id: key, defaultValue: defaultValue },
                enumerable: true,
                writable: false,
            });
            this.emitter$.emit();
            return null;
        }
    }
    transform$(key, defaultValue, params) {
        const values = this.values$.getValue();
        if (values.hasOwnProperty(key)) {
            return of(this.parseLabel(values[key], params));
        }
        else if (!this.keys.hasOwnProperty(key)) {
            values[key] = null;
            Object.defineProperty(this.keys, key, {
                value: { id: key, defaultValue: defaultValue },
                enumerable: true,
                writable: false,
            });
            this.emitter$.emit();
        }
        return this.values$.pipe(map(values => this.parseLabel(values[key], params)));
    }
    observe$() {
        return this.emitter$.pipe(debounceTime(1), switchMap(x => this.collect$()), filter(x => x !== null));
    }
    collect$() {
        if (Object.keys(this.keys).length) {
            const keys = Object.keys(this.keys).map(x => this.keys[x]);
            this.keys = {};
            return this.statePost(keys).pipe(map((labels) => {
                return labels.reduce((values, x) => {
                    values[x.id] = this.getLabel(x);
                    return values;
                }, {});
            }), tap((labels) => {
                const values = this.values$.getValue();
                Object.assign(values, labels);
                this.values$.next(values);
            }), catchError(error => {
                console.log(error);
                const labels = keys.reduce((values, x) => {
                    values[x.id] = this.getLabel(x);
                    return values;
                }, {});
                const values = this.values$.getValue();
                Object.assign(values, labels);
                // return this.values$.next(values);
                return of(null);
            }));
        }
        else {
            return of(null);
        }
    }
    parseLabel(value, params) {
        if (value && params) {
            const TEMPLATE_REGEXP = /@([^{}\s]*)/g;
            return value.replace(TEMPLATE_REGEXP, (text, key) => {
                const replacer = params[key];
                return typeof replacer !== 'undefined' ? replacer : text;
            });
        }
        else {
            return value;
        }
    }
    getLabel(label) {
        return label.value || label.defaultValue || this.getMissingLabel(label);
    }
    getMissingLabel(label) {
        if (typeof this.missingHandler === 'function') {
            return this.missingHandler(label);
        }
        return label.id;
    }
}
LabelService.ɵfac = function LabelService_Factory(t) { return new (t || LabelService)(i0.ɵɵinject(i0.Injector)); };
LabelService.ɵprov = i0.ɵɵdefineInjectable({ token: LabelService, factory: LabelService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(LabelService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,