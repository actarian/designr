import { EventEmitter, Injectable, Injector } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, debounceTime, filter, first, map, switchMap, tap } from 'rxjs/operators';
import { EntityService } from '../models/entity.service';
import * as i0 from "@angular/core";
export class SlugKey {
}
export class SlugService extends EntityService {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.keys = {};
        this.values$ = new BehaviorSubject({});
        this.emitter$ = new EventEmitter();
    }
    get collection() {
        return `/api/slug`;
    }
    transform(key) {
        const values = this.values$.getValue();
        if (values.hasOwnProperty(key)) {
            return values[key];
        }
        else if (!this.keys.hasOwnProperty(key)) {
            values[key] = null;
            Object.defineProperty(this.keys, key, {
                value: { mnemonic: key },
                enumerable: true,
                writable: false,
            });
            this.emitter$.emit();
            return null;
        }
    }
    transform$(key) {
        const values = this.values$.getValue();
        if (values.hasOwnProperty(key)) {
            return of(values[key]);
        }
        else if (!this.keys.hasOwnProperty(key)) {
            Object.defineProperty(this.keys, key, {
                value: { mnemonic: key },
                enumerable: true,
                writable: false,
            });
            this.emitter$.emit();
        }
        return this.values$.pipe(map(values => values[key]));
    }
    observe$() {
        return this.emitter$.pipe(debounceTime(1), switchMap(x => this.collect$()), filter(x => x !== null), first());
    }
    collect$() {
        if (Object.keys(this.keys).length) {
            const keys = Object.keys(this.keys).map(x => this.keys[x]);
            this.keys = {};
            return this.statePost(keys).pipe(map((items) => {
                return items.reduce((values, x) => {
                    values[x.mnemonic] = [x.slug];
                    return values;
                }, {});
            }), tap((slugs) => {
                const values = this.values$.getValue();
                Object.assign(values, slugs);
                this.values$.next(values);
            }), catchError(error => {
                console.log(error);
                const labels = keys.reduce((values, x) => {
                    values[x.mnemonic] = null;
                    return values;
                }, {});
                const values = this.values$.getValue();
                Object.assign(values, labels);
                return of(null);
            }));
        }
        else {
            return of(null);
        }
    }
}
SlugService.ɵfac = function SlugService_Factory(t) { return new (t || SlugService)(i0.ɵɵinject(i0.Injector)); };
SlugService.ɵprov = i0.ɵɵdefineInjectable({ token: SlugService, factory: SlugService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SlugService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,