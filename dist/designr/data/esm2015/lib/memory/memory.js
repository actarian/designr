import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/** Return information (UriInfo) about a URI  */
export function parseUri(str) {
    // Adapted from parseuri package - http://blog.stevenlevithan.com/archives/parseuri
    // tslint:disable-next-line:max-line-length
    const URL_REGEX = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    const m = URL_REGEX.exec(str);
    const uri = {
        source: '',
        protocol: '',
        authority: '',
        userInfo: '',
        user: '',
        password: '',
        host: '',
        port: '',
        relative: '',
        path: '',
        directory: '',
        file: '',
        query: '',
        anchor: ''
    };
    const keys = Object.keys(uri);
    let i = keys.length;
    while (i--) {
        uri[keys[i]] = m[i] || '';
    }
    return uri;
}
export function removeTrailingSlash(path) {
    return path.replace(/\/$/, '');
}
/**
* Interface for a class that creates an in-memory database
*
* Its `createDb` method creates a hash of named collections that represents the database
*
* For maximum flexibility, the service may define HTTP method overrides.
* Such methods must match the spelling of an HTTP method in lower case (e.g, "get").
* If a request has a matching method, it will be called as in
* `get(info: requestInfo, db: {})` where `db` is the database object described above.
*/
export class MemoryDataService {
}
/////////////////////////////////
/**
*  MemoryBackendConfig configuration options
*  Usage:
*    MemoryModule.forRoot(InMemHeroService, {delay: 600})
*
*  or if providing separately:
*    provide(MemoryBackendConfig, {useValue: {delay: 600}}),
*/
export class MemoryBackendConfig {
    constructor(config = {}) {
        Object.assign(this, {
            // default config:
            caseSensitiveSearch: false,
            dataEncapsulation: false,
            delay: 500,
            delete404: false,
            passThruUnknownUrl: false,
            post204: true,
            post409: false,
            put204: true,
            put404: false,
            apiBase: undefined,
            host: undefined,
            rootPath: undefined // default value is actually set in MemoryBackendConfig ctor
        }, config);
    }
}
MemoryBackendConfig.ɵfac = function MemoryBackendConfig_Factory(t) { return new (t || MemoryBackendConfig)(i0.ɵɵinject(MemoryBackendConfig)); };
MemoryBackendConfig.ɵprov = i0.ɵɵdefineInjectable({ token: MemoryBackendConfig, factory: MemoryBackendConfig.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(MemoryBackendConfig, [{
        type: Injectable
    }], function () { return [{ type: MemoryBackendConfig }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,