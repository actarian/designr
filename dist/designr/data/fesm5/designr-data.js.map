{"version":3,"file":"designr-data.js.map","sources":["ng://@designr/data/lib/config/data.config.ts","ng://@designr/data/lib/data-module.component.ts","ng://@designr/data/lib/memory/memory.service.ts","ng://@designr/data/lib/data.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { InMemoryBackendConfigArgs } from 'angular-in-memory-web-api';\nimport { Datas } from '../data/datas';\n\nexport const DATA_CONFIG = new InjectionToken<DataConfig>('data.config');\n\nexport class DataConfig {\n\tdatas?: Datas = {};\n\tmemory?: InMemoryBackendConfigArgs;\n\n\tconstructor(options?: DataConfig) {\n\t\tconsole.log('DataConfig', options);\n\t\tif (options) {\n\t\t\tthis.datas = options.datas || {};\n\t\t}\n\t}\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: 'data-module',\n\ttemplate: `<span class=\"data-module\">data {{version}}</span>`,\n\tstyles: []\n})\nexport class DataModuleComponent implements OnInit {\n\n\tversion: string = '0.0.1';\n\n\tconstructor() { }\n\n\tngOnInit() {\n\t}\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { InMemoryDbService, ParsedRequestUrl } from 'angular-in-memory-web-api';\nimport { DataConfig, DATA_CONFIG } from '../config/data.config';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class MemoryService implements InMemoryDbService {\n\n\tconstructor(\n\t\t@Inject(DATA_CONFIG) private config: DataConfig,\n\t\t// @Inject(forwardRef(() => ConfigService)) public configService: ConfigService\n\t\t// private configService: ConfigService,\n\t) {\n\t\tconsole.log('DatasService', config);\n\t}\n\n\tcreateDb() {\n\t\tconsole.log('MemoryService.createDb', this.config.datas);\n\t\treturn this.config.datas || {};\n\t}\n\n\tparseRequestUrl(url: string, service): ParsedRequestUrl {\n\t\t// !!! REMAPPING\n\t\t/*\n\t\tif (this.configService.options.memory && this.configService.options.memory.remap) {\n\t\t\tObject.keys(this.configService.options.memory.remap).forEach((k: string) => {\n\t\t\t\turl = url.replace(k, this.configService.options.memory.remap[k]);\n\t\t\t});\n\t\t}\n\t\t*/\n\t\tconst parsed: ParsedRequestUrl = service.parseRequestUrl(url);\n\t\treturn parsed;\n\t}\n\n}\n\n/*\nexport class MemoryApiConfig extends InMemoryBackendConfig implements InMemoryBackendConfigArgs {\n\n\tapiBase?: string;\n\tcaseSensitiveSearch?: boolean;\n\tdataEncapsulation?: boolean;\n\tdelay?: number;\n\tdelete404?: boolean;\n\thost?: string;\n\tpassThruUnknownUrl?: boolean;\n\tpost204?: boolean;\n\tpost409?: boolean;\n\tput204?: boolean;\n\tput404?: boolean;\n\trootPath?: string;\n\n\tremap?: { [key: string]: string };\n\tdataBase?: { [key: string]: any[] };\n\n\tconstructor(options?: MemoryApiConfig) {\n\t\tsuper(options);\n\t\tconsole.log('MemoryApiConfig', options);\n\t\tif (options) {\n\t\t\tObject.assign(this, options);\n\t\t}\n\t}\n}\n*/\n","import { HttpClientModule } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\r\nimport { DataConfig, DATA_CONFIG } from './config/data.config';\r\nimport { DataModuleComponent } from './data-module.component';\r\nimport { MemoryService } from './memory/memory.service';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tHttpClientModule,\r\n\t\tHttpClientInMemoryWebApiModule,\r\n\t],\r\n\texports: [\r\n\t\tDataModuleComponent,\r\n\t\tHttpClientInMemoryWebApiModule,\r\n\t],\r\n\tdeclarations: [\r\n\t\tDataModuleComponent,\r\n\t],\r\n\tproviders: [],\r\n})\r\n\r\nexport class DataModule {\r\n\r\n\tconstructor(\r\n\t\t@Optional() @SkipSelf() parentModule: DataModule\r\n\t) {\r\n\t\tif (parentModule) {\r\n\t\t\tthrow new Error('DataModule is already loaded. Import it in the AppModule only');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static forRoot(\r\n\t\tconfig?: DataConfig,\r\n\t): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: DataModule,\r\n\t\t\tproviders: [\r\n\t\t\t\t{ provide: DATA_CONFIG, useValue: config },\r\n\t\t\t\t...HttpClientInMemoryWebApiModule.forRoot(\r\n\t\t\t\t\tMemoryService, config.memory\r\n\t\t\t\t).providers\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAIA,IAAa,WAAW,GAAG,IAAI,cAAc,CAAa,aAAa,CAAC;AAExE;IAIC,oBAAY,OAAoB;QAHhC,UAAK,GAAW,EAAE,CAAC;QAIlB,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QACnC,IAAI,OAAO,EAAE;YACZ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;SACjC;KACD;IACF,iBAAC;CAAA;;;;;;AChBD;IAWC;QAFA,YAAO,GAAW,OAAO,CAAC;KAET;;;;IAEjB,sCAAQ;;;IAAR;KACC;;gBAZD,SAAS,SAAC;oBACV,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,qDAAmD;iBAE7D;;;;IAUD,0BAAC;CAdD;;;;;;ACFA;IASC,uBAC8B,MAAkB;QAAlB,WAAM,GAAN,MAAM,CAAY;QAI/C,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;KACpC;;;;IAED,gCAAQ;;;IAAR;QACC,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;KAC/B;;;;;;IAED,uCAAe;;;;;IAAf,UAAgB,GAAW,EAAE,OAAO;;;;;;;;;;YAS7B,MAAM,GAAqB,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC;QAC7D,OAAO,MAAM,CAAC;KACd;;gBA7BD,UAAU,SAAC;oBACX,UAAU,EAAE,MAAM;iBAClB;;;;gBAJQ,UAAU,uBAQhB,MAAM,SAAC,WAAW;;;wBAVrB;CAIA;;;;;;;ICoBC,oBACyB,YAAwB;QAEhD,IAAI,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SACjF;KACD;;;;;IAEa,kBAAO;;;;IAArB,UACC,MAAmB;QAEnB,OAAO;YACN,QAAQ,EAAE,UAAU;YACpB,SAAS;gBACR,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE;eACvC,8BAA8B,CAAC,OAAO,CACxC,aAAa,EAAE,MAAM,CAAC,MAAM,CAC5B,CAAC,SAAS,CACX;SACD,CAAC;KACF;;gBArCD,QAAQ,SAAC;oBACT,OAAO,EAAE;wBACR,gBAAgB;wBAChB,8BAA8B;qBAC9B;oBACD,OAAO,EAAE;wBACR,mBAAmB;wBACnB,8BAA8B;qBAC9B;oBACD,YAAY,EAAE;wBACb,mBAAmB;qBACnB;oBACD,SAAS,EAAE,EAAE;iBACb;;;;gBAKuC,UAAU,uBAA/C,QAAQ,YAAI,QAAQ;;IAqBvB,iBAAC;CAvCD;;;;;;;;;;;;;;"}
