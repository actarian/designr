/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import { ControlCheckboxComponent } from '../control/checkbox/control-checkbox.component';
import { ControlEmailComponent } from '../control/email/control-email.component';
import { ControlMarkdownComponent } from '../control/markdown/control-markdown.component';
import { ControlNumberComponent } from '../control/number/control-number.component';
import { ControlPasswordComponent } from '../control/password/control-password.component';
import { ControlRadioComponent } from '../control/radio/control-radio.component';
import { ControlSelectComponent } from '../control/select/control-select.component';
import { ControlTextComponent } from '../control/text/control-text.component';
import { ControlTextareaComponent } from '../control/textarea/control-textarea.component';
/** @type {?} */
export const BaseControls = {
    'checkbox': ControlCheckboxComponent,
    'email': ControlEmailComponent,
    'markdown': ControlMarkdownComponent,
    'number': ControlNumberComponent,
    'password': ControlPasswordComponent,
    'radio': ControlRadioComponent,
    'select': ControlSelectComponent,
    'text': ControlTextComponent,
    'textarea': ControlTextareaComponent,
};
export class ControlConfig {
    /**
     * @param {?=} options
     */
    constructor(options) {
        this.controls = {};
        // console.log('ControlConfig', options);
        if (options) {
            Object.assign(this, options);
            this.controls = Object.assign({}, BaseControls, (options.controls || {}));
        }
    }
}
if (false) {
    /** @type {?} */
    ControlConfig.prototype.controls;
}
/** @type {?} */
export const CONTROL_CONFIG = new InjectionToken('control.config');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGVzaWduci9jb250cm9sLyIsInNvdXJjZXMiOlsibGliL2NvbmZpZy9jb250cm9sLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUUxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUMxRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNwRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUMxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNwRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQzs7QUFFMUYsTUFBTSxPQUFPLFlBQVksR0FBRztJQUMzQixVQUFVLEVBQUUsd0JBQXdCO0lBQ3BDLE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsVUFBVSxFQUFFLHdCQUF3QjtJQUNwQyxRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDLFVBQVUsRUFBRSx3QkFBd0I7SUFDcEMsT0FBTyxFQUFFLHFCQUFxQjtJQUM5QixRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDLE1BQU0sRUFBRSxvQkFBb0I7SUFDNUIsVUFBVSxFQUFFLHdCQUF3QjtDQUNwQztBQUVELE1BQU0sT0FBTyxhQUFhOzs7O0lBSXpCLFlBQVksT0FBdUI7UUFGbkMsYUFBUSxHQUFjLEVBQUUsQ0FBQztRQUd4Qix5Q0FBeUM7UUFDekMsSUFBSSxPQUFPLEVBQUU7WUFDWixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsUUFBUSxxQkFDVCxZQUFZLEVBQ1osQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUMzQixDQUFDO1NBQ0Y7SUFDRixDQUFDO0NBQ0Q7OztJQVpBLGlDQUF5Qjs7O0FBYzFCLE1BQU0sT0FBTyxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQWdCLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xDaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvY2hlY2tib3gvY29udHJvbC1jaGVja2JveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbHMgfSBmcm9tICcuLi9jb250cm9sL2NvbnRyb2xzJztcbmltcG9ydCB7IENvbnRyb2xFbWFpbENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvZW1haWwvY29udHJvbC1lbWFpbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbE1hcmtkb3duQ29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbC9tYXJrZG93bi9jb250cm9sLW1hcmtkb3duLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sTnVtYmVyQ29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbC9udW1iZXIvY29udHJvbC1udW1iZXIuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xQYXNzd29yZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvcGFzc3dvcmQvY29udHJvbC1wYXNzd29yZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbFJhZGlvQ29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbC9yYWRpby9jb250cm9sLXJhZGlvLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbC9zZWxlY3QvY29udHJvbC1zZWxlY3QuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xUZXh0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbC90ZXh0L2NvbnRyb2wtdGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbFRleHRhcmVhQ29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbC90ZXh0YXJlYS9jb250cm9sLXRleHRhcmVhLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBCYXNlQ29udHJvbHMgPSB7XG5cdCdjaGVja2JveCc6IENvbnRyb2xDaGVja2JveENvbXBvbmVudCxcblx0J2VtYWlsJzogQ29udHJvbEVtYWlsQ29tcG9uZW50LFxuXHQnbWFya2Rvd24nOiBDb250cm9sTWFya2Rvd25Db21wb25lbnQsXG5cdCdudW1iZXInOiBDb250cm9sTnVtYmVyQ29tcG9uZW50LFxuXHQncGFzc3dvcmQnOiBDb250cm9sUGFzc3dvcmRDb21wb25lbnQsXG5cdCdyYWRpbyc6IENvbnRyb2xSYWRpb0NvbXBvbmVudCxcblx0J3NlbGVjdCc6IENvbnRyb2xTZWxlY3RDb21wb25lbnQsXG5cdCd0ZXh0JzogQ29udHJvbFRleHRDb21wb25lbnQsXG5cdCd0ZXh0YXJlYSc6IENvbnRyb2xUZXh0YXJlYUNvbXBvbmVudCxcbn07XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sQ29uZmlnIHtcblxuXHRjb250cm9scz86IENvbnRyb2xzID0ge307XG5cblx0Y29uc3RydWN0b3Iob3B0aW9ucz86IENvbnRyb2xDb25maWcpIHtcblx0XHQvLyBjb25zb2xlLmxvZygnQ29udHJvbENvbmZpZycsIG9wdGlvbnMpO1xuXHRcdGlmIChvcHRpb25zKSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXHRcdFx0dGhpcy5jb250cm9scyA9IHtcblx0XHRcdFx0Li4uQmFzZUNvbnRyb2xzLFxuXHRcdFx0XHQuLi4ob3B0aW9ucy5jb250cm9scyB8fCB7fSlcblx0XHRcdH07XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBDT05UUk9MX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxDb250cm9sQ29uZmlnPignY29udHJvbC5jb25maWcnKTtcbiJdfQ==