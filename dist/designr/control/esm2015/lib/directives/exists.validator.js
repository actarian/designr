import { isObservable, of } from 'rxjs';
import { catchError, debounceTime, map, take } from 'rxjs/operators';
const DEBOUNCE_TIME = 250;
function exists$(value, exists) {
    if (typeof exists === 'function') {
        const oservableOrValue = exists(value);
        if (isObservable(oservableOrValue)) {
            return oservableOrValue.pipe(map(exists => {
                return exists ? { exists: true } : null;
            }));
        }
        else {
            return of(oservableOrValue ? { exists: true } : null);
        }
    }
    else {
        return of(null);
    }
}
export function existsValidator(exists) {
    return (control) => {
        return exists$(control.value, exists).pipe(debounceTime(DEBOUNCE_TIME), catchError((error) => {
            console.log('existsValidator.catchError', error);
            return of(null);
        }), take(1));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3RzLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkZXNpZ25yL2NvbnRyb2wvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9leGlzdHMudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRSxNQUFNLGFBQWEsR0FBVyxHQUFHLENBQUM7QUFFbEMsU0FBUyxPQUFPLENBQUMsS0FBVSxFQUFFLE1BQWlCO0lBQzdDLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO1FBQ2pDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDbkMsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQzNCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDWixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FDRixDQUFDO1NBQ0Y7YUFBTTtZQUNOLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEQ7S0FDRDtTQUFNO1FBQ04sT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEI7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFpQjtJQUNoRCxPQUFPLENBQUMsT0FBd0IsRUFBdUMsRUFBRTtRQUN4RSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDekMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxFQUMzQixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2pELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxFQUNGLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQXN5bmNWYWxpZGF0b3JGbiwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGRlYm91bmNlVGltZSwgbWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBERUJPVU5DRV9USU1FOiBudW1iZXIgPSAyNTA7XG5cbmZ1bmN0aW9uIGV4aXN0cyQodmFsdWU6IGFueSwgZXhpc3RzPzogRnVuY3Rpb24pOiBPYnNlcnZhYmxlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB7XG5cdGlmICh0eXBlb2YgZXhpc3RzID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Y29uc3Qgb3NlcnZhYmxlT3JWYWx1ZSA9IGV4aXN0cyh2YWx1ZSk7XG5cdFx0aWYgKGlzT2JzZXJ2YWJsZShvc2VydmFibGVPclZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIG9zZXJ2YWJsZU9yVmFsdWUucGlwZShcblx0XHRcdFx0bWFwKGV4aXN0cyA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGV4aXN0cyA/IHsgZXhpc3RzOiB0cnVlIH0gOiBudWxsO1xuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG9mKG9zZXJ2YWJsZU9yVmFsdWUgPyB7IGV4aXN0czogdHJ1ZSB9IDogbnVsbCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBvZihudWxsKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhpc3RzVmFsaWRhdG9yKGV4aXN0cz86IEZ1bmN0aW9uKTogQXN5bmNWYWxpZGF0b3JGbiB7XG5cdHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogT2JzZXJ2YWJsZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4gPT4ge1xuXHRcdHJldHVybiBleGlzdHMkKGNvbnRyb2wudmFsdWUsIGV4aXN0cykucGlwZShcblx0XHRcdGRlYm91bmNlVGltZShERUJPVU5DRV9USU1FKSxcblx0XHRcdGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdleGlzdHNWYWxpZGF0b3IuY2F0Y2hFcnJvcicsIGVycm9yKTtcblx0XHRcdFx0cmV0dXJuIG9mKG51bGwpO1xuXHRcdFx0fSksXG5cdFx0XHR0YWtlKDEpLFxuXHRcdCk7XG5cdH07XG59XG4iXX0=