/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InjectionToken } from '@angular/core';
import { ControlCheckboxComponent } from '../control/checkbox/control-checkbox.component';
import { ControlEmailComponent } from '../control/email/control-email.component';
import { ControlMarkdownComponent } from '../control/markdown/control-markdown.component';
import { ControlNumberComponent } from '../control/number/control-number.component';
import { ControlPasswordComponent } from '../control/password/control-password.component';
import { ControlRadioComponent } from '../control/radio/control-radio.component';
import { ControlSelectComponent } from '../control/select/control-select.component';
import { ControlTextComponent } from '../control/text/control-text.component';
import { ControlTextareaComponent } from '../control/textarea/control-textarea.component';
/** @type {?} */
export var BaseControls = {
    'checkbox': ControlCheckboxComponent,
    'email': ControlEmailComponent,
    'markdown': ControlMarkdownComponent,
    'number': ControlNumberComponent,
    'password': ControlPasswordComponent,
    'radio': ControlRadioComponent,
    'select': ControlSelectComponent,
    'text': ControlTextComponent,
    'textarea': ControlTextareaComponent,
};
var ControlConfig = /** @class */ (function () {
    function ControlConfig(options) {
        this.controls = {};
        // console.log('ControlConfig', options);
        if (options) {
            Object.assign(this, options);
            this.controls = tslib_1.__assign({}, BaseControls, (options.controls || {}));
        }
    }
    return ControlConfig;
}());
export { ControlConfig };
if (false) {
    /** @type {?} */
    ControlConfig.prototype.controls;
}
/** @type {?} */
export var CONTROL_CONFIG = new InjectionToken('control.config');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGVzaWduci9jb250cm9sLyIsInNvdXJjZXMiOlsibGliL2NvbmZpZy9jb250cm9sLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFFMUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDakYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDMUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDMUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDcEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDOUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7O0FBRTFGLE1BQU0sS0FBTyxZQUFZLEdBQUc7SUFDM0IsVUFBVSxFQUFFLHdCQUF3QjtJQUNwQyxPQUFPLEVBQUUscUJBQXFCO0lBQzlCLFVBQVUsRUFBRSx3QkFBd0I7SUFDcEMsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxVQUFVLEVBQUUsd0JBQXdCO0lBQ3BDLE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxNQUFNLEVBQUUsb0JBQW9CO0lBQzVCLFVBQVUsRUFBRSx3QkFBd0I7Q0FDcEM7QUFFRDtJQUlDLHVCQUFZLE9BQXVCO1FBRm5DLGFBQVEsR0FBYyxFQUFFLENBQUM7UUFHeEIseUNBQXlDO1FBQ3pDLElBQUksT0FBTyxFQUFFO1lBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLFFBQVEsd0JBQ1QsWUFBWSxFQUNaLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FDM0IsQ0FBQztTQUNGO0lBQ0YsQ0FBQztJQUNGLG9CQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7Ozs7SUFaQSxpQ0FBeUI7OztBQWMxQixNQUFNLEtBQU8sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFnQixnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sQ2hlY2tib3hDb21wb25lbnQgfSBmcm9tICcuLi9jb250cm9sL2NoZWNrYm94L2NvbnRyb2wtY2hlY2tib3guY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xzIH0gZnJvbSAnLi4vY29udHJvbC9jb250cm9scyc7XG5pbXBvcnQgeyBDb250cm9sRW1haWxDb21wb25lbnQgfSBmcm9tICcuLi9jb250cm9sL2VtYWlsL2NvbnRyb2wtZW1haWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xNYXJrZG93bkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvbWFya2Rvd24vY29udHJvbC1tYXJrZG93bi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbE51bWJlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvbnVtYmVyL2NvbnRyb2wtbnVtYmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sUGFzc3dvcmRDb21wb25lbnQgfSBmcm9tICcuLi9jb250cm9sL3Bhc3N3b3JkL2NvbnRyb2wtcGFzc3dvcmQuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xSYWRpb0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvcmFkaW8vY29udHJvbC1yYWRpby5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbFNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvc2VsZWN0L2NvbnRyb2wtc2VsZWN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sVGV4dENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvdGV4dC9jb250cm9sLXRleHQuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xUZXh0YXJlYUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRyb2wvdGV4dGFyZWEvY29udHJvbC10ZXh0YXJlYS5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgQmFzZUNvbnRyb2xzID0ge1xuXHQnY2hlY2tib3gnOiBDb250cm9sQ2hlY2tib3hDb21wb25lbnQsXG5cdCdlbWFpbCc6IENvbnRyb2xFbWFpbENvbXBvbmVudCxcblx0J21hcmtkb3duJzogQ29udHJvbE1hcmtkb3duQ29tcG9uZW50LFxuXHQnbnVtYmVyJzogQ29udHJvbE51bWJlckNvbXBvbmVudCxcblx0J3Bhc3N3b3JkJzogQ29udHJvbFBhc3N3b3JkQ29tcG9uZW50LFxuXHQncmFkaW8nOiBDb250cm9sUmFkaW9Db21wb25lbnQsXG5cdCdzZWxlY3QnOiBDb250cm9sU2VsZWN0Q29tcG9uZW50LFxuXHQndGV4dCc6IENvbnRyb2xUZXh0Q29tcG9uZW50LFxuXHQndGV4dGFyZWEnOiBDb250cm9sVGV4dGFyZWFDb21wb25lbnQsXG59O1xuXG5leHBvcnQgY2xhc3MgQ29udHJvbENvbmZpZyB7XG5cblx0Y29udHJvbHM/OiBDb250cm9scyA9IHt9O1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBDb250cm9sQ29uZmlnKSB7XG5cdFx0Ly8gY29uc29sZS5sb2coJ0NvbnRyb2xDb25maWcnLCBvcHRpb25zKTtcblx0XHRpZiAob3B0aW9ucykge1xuXHRcdFx0T2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblx0XHRcdHRoaXMuY29udHJvbHMgPSB7XG5cdFx0XHRcdC4uLkJhc2VDb250cm9scyxcblx0XHRcdFx0Li4uKG9wdGlvbnMuY29udHJvbHMgfHwge30pXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgY29uc3QgQ09OVFJPTF9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48Q29udHJvbENvbmZpZz4oJ2NvbnRyb2wuY29uZmlnJyk7XG4iXX0=