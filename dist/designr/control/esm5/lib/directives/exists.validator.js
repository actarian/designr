import { isObservable, of } from 'rxjs';
import { catchError, debounceTime, map, take } from 'rxjs/operators';
var DEBOUNCE_TIME = 250;
function exists$(value, exists) {
    if (typeof exists === 'function') {
        var oservableOrValue = exists(value);
        if (isObservable(oservableOrValue)) {
            return oservableOrValue.pipe(map(function (exists) {
                return exists ? { exists: true } : null;
            }));
        }
        else {
            return of(oservableOrValue ? { exists: true } : null);
        }
    }
    else {
        return of(null);
    }
}
export function existsValidator(exists) {
    return function (control) {
        return exists$(control.value, exists).pipe(debounceTime(DEBOUNCE_TIME), catchError(function (error) {
            console.log('existsValidator.catchError', error);
            return of(null);
        }), take(1));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3RzLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkZXNpZ25yL2NvbnRyb2wvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9leGlzdHMudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRSxJQUFNLGFBQWEsR0FBVyxHQUFHLENBQUM7QUFFbEMsU0FBUyxPQUFPLENBQUMsS0FBVSxFQUFFLE1BQWlCO0lBQzdDLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO1FBQ2pDLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDbkMsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQzNCLEdBQUcsQ0FBQyxVQUFBLE1BQU07Z0JBQ1QsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDekMsQ0FBQyxDQUFDLENBQ0YsQ0FBQztTQUNGO2FBQU07WUFDTixPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3REO0tBQ0Q7U0FBTTtRQUNOLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2hCO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBaUI7SUFDaEQsT0FBTyxVQUFDLE9BQXdCO1FBQy9CLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUN6QyxZQUFZLENBQUMsYUFBYSxDQUFDLEVBQzNCLFVBQVUsQ0FBQyxVQUFDLEtBQUs7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNqRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixDQUFDLENBQUMsRUFDRixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1AsQ0FBQztJQUNILENBQUMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIEFzeW5jVmFsaWRhdG9yRm4sIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBpc09ic2VydmFibGUsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBkZWJvdW5jZVRpbWUsIG1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgREVCT1VOQ0VfVElNRTogbnVtYmVyID0gMjUwO1xuXG5mdW5jdGlvbiBleGlzdHMkKHZhbHVlOiBhbnksIGV4aXN0cz86IEZ1bmN0aW9uKTogT2JzZXJ2YWJsZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4ge1xuXHRpZiAodHlwZW9mIGV4aXN0cyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGNvbnN0IG9zZXJ2YWJsZU9yVmFsdWUgPSBleGlzdHModmFsdWUpO1xuXHRcdGlmIChpc09ic2VydmFibGUob3NlcnZhYmxlT3JWYWx1ZSkpIHtcblx0XHRcdHJldHVybiBvc2VydmFibGVPclZhbHVlLnBpcGUoXG5cdFx0XHRcdG1hcChleGlzdHMgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBleGlzdHMgPyB7IGV4aXN0czogdHJ1ZSB9IDogbnVsbDtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBvZihvc2VydmFibGVPclZhbHVlID8geyBleGlzdHM6IHRydWUgfSA6IG51bGwpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gb2YobnVsbCk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4aXN0c1ZhbGlkYXRvcihleGlzdHM/OiBGdW5jdGlvbik6IEFzeW5jVmFsaWRhdG9yRm4ge1xuXHRyZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IE9ic2VydmFibGU8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+ID0+IHtcblx0XHRyZXR1cm4gZXhpc3RzJChjb250cm9sLnZhbHVlLCBleGlzdHMpLnBpcGUoXG5cdFx0XHRkZWJvdW5jZVRpbWUoREVCT1VOQ0VfVElNRSksXG5cdFx0XHRjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnZXhpc3RzVmFsaWRhdG9yLmNhdGNoRXJyb3InLCBlcnJvcik7XG5cdFx0XHRcdHJldHVybiBvZihudWxsKTtcblx0XHRcdH0pLFxuXHRcdFx0dGFrZSgxKSxcblx0XHQpO1xuXHR9O1xufVxuIl19