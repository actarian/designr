{"version":3,"sources":["/Users/lzampetti/Desktop/PROJECTS/designr/dist/designr/page/fesm2015/designr-page.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BC,0HAKC;;;;;;;;;;;;;;kCAK8M;;;;;;;;;+GAO/M;;;;AAGC;;;;;;;;;;;;;;;;;CAOD,mFAQC;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuKD,qLAKC;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;CAeD,4BAMC;;;;;;;;;gDAE4C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoE7C,4BAMC;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAeD,4BAOC;;;;;;;;;;;;yEAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ED,oHAKC;;;;;;;;;;;;;;kCAKmM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuNpM,oHAKC;;;;;;;;;;;;;;;uLASoR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2FrR,4BAMC;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuGD,4IAKC;;;;;;;;;;;;;6HAOmR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4CpR;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6CD;;;0BAGC;;;;;;;;;;;;;;;;;;CAaD;;;;;;;;;;;;0BAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiDD,uBA0BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAIA","file":"designr-page.js","sourcesContent":["import { NavigationEnd, Router, ActivatedRoute, RouterModule } from '@angular/router';\nimport { Meta, Title } from '@angular/platform-browser';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { DisposableComponent, RouteService, EntityService, HttpStatusCodeService, ImageType, CoreModule } from '@designr/core';\nimport { of, BehaviorSubject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { InjectionToken, Inject, Injectable, Component, NgModule, Injector, ViewEncapsulation, Input, TemplateRef, ComponentFactoryResolver, Directive, ViewContainerRef, ViewChild, defineInjectable, inject, Optional, SkipSelf, PLATFORM_ID, INJECTOR } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageConfig {\n    /**\n     * @param {?=} options\n     */\n    constructor(options) {\n        this.pages = {};\n        this.layouts = {};\n        // console.log('PageConfig', options);\n        if (options) {\n            this.layouts = options.layouts || {};\n            this.defaultLayout = options.defaultLayout;\n            this.pages = options.pages || {};\n            this.defaultPage = options.defaultPage;\n            this.notFoundPage = options.notFoundPage;\n        }\n    }\n}\n/** @type {?} */\nconst PAGE_CONFIG = new InjectionToken('page.config');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ConfigService {\n    /**\n     * @param {?} options\n     */\n    constructor(options) {\n        this.options = new PageConfig(options || {});\n    }\n}\nConfigService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nConfigService.ctorParameters = () => [\n    { type: PageConfig, decorators: [{ type: Inject, args: [PAGE_CONFIG,] }] }\n];\n/** @nocollapse */ ConfigService.ngInjectableDef = defineInjectable({ factory: function ConfigService_Factory() { return new ConfigService(inject(PAGE_CONFIG)); }, token: ConfigService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ILayoutComponent {\n}\nILayoutComponent.propDecorators = {\n    template: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LayoutComponent {\n}\nLayoutComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'layout-component',\n                template: `<div [ngClass]=\"page?.component\">\n\t<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n</div>`\n            }] }\n];\nLayoutComponent.propDecorators = {\n    template: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageMeta {\n}\nclass PageIndex {\n    /**\n     * @param {?=} options\n     */\n    constructor(options) {\n        if (options) {\n            Object.assign(this, options);\n        }\n    }\n}\nclass PageRelation {\n}\nclass Page {\n    /**\n     * @param {?=} options\n     */\n    constructor(options) {\n        this.meta = {};\n        if (options) {\n            Object.assign(this, options);\n            if (options.related) {\n                /** @type {?} */\n                const related = options.related.map((/**\n                 * @param {?} x\n                 * @return {?}\n                 */\n                (x) => {\n                    // const item = new PageIndex(x.page);\n                    /** @type {?} */\n                    const item = new PageIndex(x);\n                    item.relationType = x.type;\n                    return item;\n                }));\n                this.related = related;\n            }\n        }\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getFeature(id) {\n        return this.features.find((/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => x.id === id)) || null;\n    }\n    /**\n     * @param {?} type\n     * @param {?} n\n     * @return {?}\n     */\n    getFeatures(type, n) {\n        return this.features ? this.features.filter((/**\n         * @param {?} x\n         * @param {?} i\n         * @return {?}\n         */\n        (x, i) => (n.indexOf(Number(x.id)) !== -1 && x.type === type))).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a.type - b.type)) : [];\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    getFeaturesByTypes(type) {\n        return this.features ? this.features.filter((/**\n         * @param {?} x\n         * @return {?}\n         */\n        (x) => (type.indexOf(Number(x.type)) !== -1))) : [];\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    getGroupedFeaturesByTypes(type) {\n        /** @type {?} */\n        const groups = {};\n        type.forEach((/**\n         * @param {?} type\n         * @return {?}\n         */\n        type => {\n            /** @type {?} */\n            const group = groups[type] || { features: [] };\n            if (this.features) {\n                this.features.forEach((/**\n                 * @param {?} x\n                 * @return {?}\n                 */\n                (x) => {\n                    if (Number(x.type) === type) {\n                        group.features.push(x);\n                    }\n                }));\n            }\n            groups[type] = group;\n        }));\n        /*\n        if (this.features) {\n            this.features.forEach((x: Feature) => {\n                if (type.indexOf(Number(x.type)) !== -1) {\n                    const group = groups[x.type] || { features: [] };\n                    group.features.push(x);\n                    groups[x.type] = group;\n                }\n            });\n        }\n        */\n        return groups;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass UseLayoutDirective {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} componentFactoryResolver\n     * @param {?} configService\n     */\n    constructor(templateRef, viewContainerRef, componentFactoryResolver, configService) {\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.configService = configService;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const options = this.configService.options;\n        /** @type {?} */\n        const component = options.layouts[this.layoutKey] || options.defaultLayout || LayoutComponent;\n        /** @type {?} */\n        const containerFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n        this.container = this.viewContainerRef.createComponent(containerFactory);\n        this.container.instance.template = this.templateRef;\n        this.container.instance.page = this.page;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.container) {\n            this.container.destroy();\n            this.container = null;\n        }\n    }\n}\nUseLayoutDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[useLayout]'\n            },] }\n];\n/** @nocollapse */\nUseLayoutDirective.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver },\n    { type: ConfigService }\n];\nUseLayoutDirective.propDecorators = {\n    layoutKey: [{ type: Input, args: ['useLayout',] }],\n    page: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageModuleComponent {\n    constructor() {\n        this.version = '0.0.12';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n}\nPageModuleComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'page-module',\n                template: `<span class=\"page-module\">page {{version}}</span>`\n            }] }\n];\n/** @nocollapse */\nPageModuleComponent.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageComponent extends DisposableComponent {\n    /**\n     * @param {?} injector\n     */\n    constructor(injector) {\n        super();\n        this.injector = injector;\n        this.scrollToTop();\n    }\n    /**\n     * @return {?}\n     */\n    get platformId() {\n        return (/** @type {?} */ (this.injector.get(PLATFORM_ID)));\n    }\n    /**\n     * @return {?}\n     */\n    get routeService() {\n        return this.injector.get(RouteService);\n    }\n    /**\n     * @return {?}\n     */\n    get router() {\n        return this.injector.get(Router);\n    }\n    // !!! Scroll to top on page change\n    /**\n     * @private\n     * @return {?}\n     */\n    scrollToTop() {\n        // !!! PLATFORM_ID dependancy manually activated\n        // const platformId: string = RouteService.injector.get(PLATFORM_ID) as string;\n        if (isPlatformBrowser(this.platformId)) {\n            // !!! Router dependancy manually activated\n            // const router = RouteService.injector.get(Router);\n            this.router.events.subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                if (!(e instanceof NavigationEnd)) {\n                    return;\n                }\n                window.scrollTo(0, 0);\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getId() {\n        return this.routeService.getId() || (this.page ? this.page.id : 0);\n    }\n    /**\n     * @return {?}\n     */\n    getSlug() {\n        return this.routeService.getSlug() || (this.page ? this.page.slug : '');\n    }\n}\nPageComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'core-page',\n                template: `<div class=\"page\">Page not found!</div>`\n            }] }\n];\n/** @nocollapse */\nPageComponent.ctorParameters = () => [\n    { type: Injector }\n];\nPageComponent.propDecorators = {\n    page: [{ type: Input }],\n    params: [{ type: Input }],\n    queryParams: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageNotFoundComponent extends PageComponent {\n    /**\n     * @param {?} injector\n     */\n    constructor(injector) {\n        super(injector);\n        this.injector = injector;\n        this.url = this.router.url;\n    }\n}\nPageNotFoundComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'page-not-found-component',\n                template: `<div class=\"page\">Page <span>{{url}}</span> not found</div>`,\n                encapsulation: ViewEncapsulation.Emulated\n            }] }\n];\n/** @nocollapse */\nPageNotFoundComponent.ctorParameters = () => [\n    { type: Injector }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LinkService {\n    /**\n     * @param {?} doc\n     */\n    constructor(doc) {\n        this.doc = doc;\n    }\n    /**\n     * @param {?} definition\n     * @return {?}\n     */\n    addTag(definition) {\n        /** @type {?} */\n        const element = this.doc.createElement(`link`);\n        this.updateElementDefinition(element, definition);\n        this.doc.head.appendChild(element);\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    getTag(selector) {\n        /** @type {?} */\n        const element = this.doc.querySelector(`link${selector}`);\n        return element;\n    }\n    /**\n     * @param {?} selector\n     * @param {?} definition\n     * @return {?}\n     */\n    updateTag(selector, definition) {\n        /** @type {?} */\n        const element = this.doc.querySelector(`link${selector}`);\n        this.updateElementDefinition(element, definition);\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    removeTag(selector) {\n        /** @type {?} */\n        const element = this.doc.querySelector(`link${selector}`);\n        element.remove();\n    }\n    /**\n     * @param {?} element\n     * @param {?} definition\n     * @return {?}\n     */\n    updateElementDefinition(element, definition) {\n        this.updateElementAttribute(element, 'href', definition.href);\n        this.updateElementAttribute(element, 'id', definition.id);\n        this.updateElementAttribute(element, 'rel', definition.rel);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @param {?} value\n     * @return {?}\n     */\n    updateElementAttribute(element, attribute, value) {\n        if (value) {\n            element.setAttribute(attribute, value);\n        }\n        else {\n            element.removeAttribute(attribute);\n        }\n    }\n}\nLinkService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nLinkService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ LinkService.ngInjectableDef = defineInjectable({ factory: function LinkService_Factory() { return new LinkService(inject(DOCUMENT)); }, token: LinkService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageService extends EntityService {\n    /**\n     * @param {?} injector\n     * @param {?} titleService\n     * @param {?} metaService\n     * @param {?} linkService\n     * @param {?} statusCodeService\n     */\n    constructor(injector, titleService, metaService, linkService, statusCodeService) {\n        super(injector);\n        this.injector = injector;\n        this.titleService = titleService;\n        this.metaService = metaService;\n        this.linkService = linkService;\n        this.statusCodeService = statusCodeService;\n        // console.log('PageService', options);\n    }\n    /**\n     * @return {?}\n     */\n    get collection() {\n        return '/api/page';\n    }\n    /**\n     * @param {?} slug\n     * @return {?}\n     */\n    getStatePageBySlug(slug) {\n        slug = slug.split('?')[0];\n        if (slug.indexOf('/') === 0) {\n            slug = slug.substr(1);\n        }\n        return this.stateGet(`?slug=/${slug}`).pipe(map((/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => {\n            x = new Page(Array.isArray(x) ? x.find((/**\n             * @param {?} x\n             * @return {?}\n             */\n            x => x.slug === `/${slug}`)) : x);\n            // console.log('PageService.getStatePageBySlug', x);\n            return x;\n        })), catchError((/**\n         * @param {?} error\n         * @return {?}\n         */\n        error => {\n            // console.log('getStatePageBySlug.error', error);\n            this.statusCodeService.setStatusCode(error.status, error.error ? error.error.redirectUrl : null);\n            return of(null);\n        })));\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getStatePageById(id) {\n        return this.stateGet(`/${id}`).pipe(\n        // tap(x => console.log('PageService.getPageById', id, x)),\n        map((/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => new Page(x))), catchError((/**\n         * @param {?} error\n         * @return {?}\n         */\n        error => {\n            this.statusCodeService.setStatusCode(error.status, error.error ? error.error.redirectUrl : null);\n            return of(null);\n        })));\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getPageById(id) {\n        return this.get(`/${id}`).pipe(\n        // tap(x => console.log('PageService.getPageById', id, x)),\n        map((/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => new Page(x))), catchError((/**\n         * @param {?} error\n         * @return {?}\n         */\n        error => {\n            this.statusCodeService.setStatusCode(error.status, error.error ? error.error.redirectUrl : null);\n            return of(null);\n        })));\n    }\n    /**\n     * @param {?} slug\n     * @return {?}\n     */\n    getPageBySlug(slug) {\n        slug = slug.split(';')[0];\n        // console.log('PageService.getPageBySlug', slug);\n        return this.get(`?slug=/${slug}`).pipe(map((/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => new Page(x))), \n        // tap(x => this.logger.log(`found pages matching \"${slug}\"`))\n        // tap(x => console.log('PageService.getPageBySlug', x, slug))\n        catchError((/**\n         * @param {?} error\n         * @return {?}\n         */\n        error => {\n            // console.log('PageService.getPageBySlug.error', error);\n            this.statusCodeService.setStatusCode(error.status, error.error ? error.error.redirectUrl : null);\n            return of(null);\n        })));\n    }\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    addOrUpdateMetaData(page) {\n        // console.log('PageService.addOrUpdateMetaData', page);\n        if (!page) {\n            return;\n        }\n        this.titleService.setTitle(page.title);\n        this.addOrUpdateMeta({ property: 'og:title', content: page.title });\n        this.addOrUpdateMeta({ property: 'og:image', content: this.getSocialImage(page).url });\n        this.addOrUpdateMeta({ property: 'og:image:width', content: '1200' });\n        this.addOrUpdateMeta({ property: 'og:image:height', content: '630' });\n        this.addOrUpdateMeta({ property: 'og:url', content: page.url || this.origin });\n        /** @type {?} */\n        const meta = page.meta;\n        if (meta) {\n            this.addOrUpdateMeta({ name: 'description', content: meta.description || 'Servizio di qualità senza costi aggiuntivi con i convenienti pacchetti viaggio Eurospin. Prenota comodamente online!' });\n            this.addOrUpdateMeta({ name: 'keywords', content: meta.keywords || 'viaggi,viaggi eurospin' });\n            this.addOrUpdateMeta({ name: 'robots', content: meta.robots || 'index,follow' });\n            this.addOrUpdateMeta({ property: 'og:locale', content: meta.locale || 'it_IT' });\n            this.addOrUpdateMeta({ property: 'og:type', content: meta.type || 'article' });\n            this.addOrUpdateMeta({ property: 'og:author', content: meta.author || 'Eurospin Viaggi' });\n            this.addOrUpdateLink({ rel: 'canonical', href: meta.canonical || (this.origin.indexOf(page.url) === 0 ? null : page.url) });\n        }\n        // console.log('PageOutletComponent.addOrUpdateMetaData', page.id, page.title, page.url);\n    }\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    getSocialImage(page) {\n        /** @type {?} */\n        const image = page.images ? (page.images.find((/**\n         * @param {?} i\n         * @return {?}\n         */\n        i => i.type === ImageType.Share)) ||\n            page.images.find((/**\n             * @param {?} i\n             * @return {?}\n             */\n            i => i.type === ImageType.Default)) ||\n            page.images.find((/**\n             * @param {?} i\n             * @return {?}\n             */\n            i => i.type === ImageType.Gallery))) : null;\n        return image || (/** @type {?} */ ({\n            url: 'https://s-static.ak.fbcdn.net/images/devsite/attachment_blank.png'\n        }));\n    }\n    /**\n     * @param {?} definition\n     * @return {?}\n     */\n    addOrUpdateMeta(definition) {\n        /** @type {?} */\n        const selector = definition.name ? `name=\"${definition.name}\"` : `property=\"${definition.property}\"`;\n        if (this.metaService.getTag(selector)) {\n            if (definition.content) {\n                this.metaService.updateTag(definition, selector);\n            }\n            else {\n                this.metaService.removeTag(selector);\n            }\n        }\n        else if (definition.content) {\n            this.metaService.addTag(definition);\n        }\n    }\n    /**\n     * @param {?} definition\n     * @return {?}\n     */\n    addOrUpdateLink(definition) {\n        /** @type {?} */\n        const selector = definition.id ? `#${definition.id}` : `[rel=\"${definition.rel}\"]`;\n        if (this.linkService.getTag(selector)) {\n            if (definition.href) {\n                this.linkService.updateTag(selector, definition);\n            }\n            else {\n                this.linkService.removeTag(selector);\n            }\n        }\n        else if (definition.href) {\n            this.linkService.addTag(definition);\n        }\n    }\n}\nPageService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nPageService.ctorParameters = () => [\n    { type: Injector },\n    { type: Title },\n    { type: Meta },\n    { type: LinkService },\n    { type: HttpStatusCodeService }\n];\n/** @nocollapse */ PageService.ngInjectableDef = defineInjectable({ factory: function PageService_Factory() { return new PageService(inject(INJECTOR), inject(Title), inject(Meta), inject(LinkService), inject(HttpStatusCodeService)); }, token: PageService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageOutletComponent extends DisposableComponent {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} componentFactoryResolver\n     * @param {?} routeService\n     * @param {?} pageService\n     */\n    constructor(router, route, componentFactoryResolver, routeService, pageService) {\n        super();\n        this.router = router;\n        this.route = route;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.routeService = routeService;\n        this.pageService = pageService;\n        // !!! keep -> Avoid PageOutlet Route Caching for different routes\n        this.router.routeReuseStrategy.shouldReuseRoute = (/**\n         * @return {?}\n         */\n        () => {\n            return false;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.setSnapshot(this.route.snapshot);\n    }\n    /**\n     * @param {?} snapshot\n     * @return {?}\n     */\n    setSnapshot(snapshot) {\n        this.routeService.params = this.routeService.toData(snapshot.params);\n        this.routeService.queryParams = this.routeService.toData(snapshot.queryParams);\n        /** @type {?} */\n        const data = snapshot.data;\n        /** @type {?} */\n        const params = this.routeService.params;\n        /** @type {?} */\n        const queryParams = this.routeService.queryParams;\n        /** @type {?} */\n        let component = PageNotFoundComponent;\n        if (data.pageResolver) {\n            component = data.pageResolver.component;\n            /** @type {?} */\n            const page = data.pageResolver.page;\n            /** @type {?} */\n            const factory = this.componentFactoryResolver.resolveComponentFactory(component);\n            this.viewContainerRef.clear();\n            /** @type {?} */\n            const componentRef = this.viewContainerRef.createComponent(factory);\n            /** @type {?} */\n            const instance = componentRef.instance;\n            instance.page = page;\n            instance.params = params;\n            instance.queryParams = queryParams;\n            if (typeof instance['PageInit'] === 'function') {\n                instance['PageInit']();\n            }\n            this.componentRef = componentRef;\n            if (page) {\n                /** @type {?} */\n                const config = this.router.config.slice();\n                /** @type {?} */\n                const slug = page.slug;\n                if (slug) {\n                    config.push({\n                        path: slug.indexOf('/') === 0 ? slug.substr(1) : slug, component: component,\n                    });\n                    this.router.resetConfig(config);\n                }\n                this.pageService.addOrUpdateMetaData(page);\n            }\n        } /* else {\n            // console.log('PageOutletComponent.setSnapshot 404', data);\n        }*/\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.componentRef.destroy();\n    }\n}\nPageOutletComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'page-outlet',\n                template: '<ng-template #outlet></ng-template>'\n            }] }\n];\n/** @nocollapse */\nPageOutletComponent.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: ComponentFactoryResolver },\n    { type: RouteService },\n    { type: PageService }\n];\nPageOutletComponent.propDecorators = {\n    viewContainerRef: [{ type: ViewChild, args: ['outlet', { read: ViewContainerRef },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageResolver {\n    /**\n     * @param {?} configService\n     * @param {?} page\n     */\n    constructor(configService, page) {\n        this.configService = configService;\n        this.page = page;\n        this.component = PageComponent;\n        if (page && this.configService.options.pages) {\n            this.component = this.configService.options.pages[page.component] || this.configService.options.defaultPage;\n        }\n        else {\n            this.component = this.configService.options.notFoundPage || PageNotFoundComponent;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageResolverService {\n    /**\n     * @param {?} configService\n     * @param {?} pageService\n     * @param {?} routeService\n     */\n    constructor(configService, pageService, routeService) {\n        this.configService = configService;\n        this.pageService = pageService;\n        this.routeService = routeService;\n        this.events$ = new BehaviorSubject(null);\n    }\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    pageToPageResolver(page) {\n        /** @type {?} */\n        const pageResolver = new PageResolver(this.configService, page);\n        this.events$.next(pageResolver);\n        return pageResolver;\n    }\n    /**\n     * @param {?} route\n     * @param {?} state\n     * @return {?}\n     */\n    resolve(route, state) {\n        if (route.params && route.params.id) {\n            return this.getPageById(route.params.id);\n        }\n        else {\n            /** @type {?} */\n            const paths = route.url.filter((/**\n             * @param {?} x\n             * @return {?}\n             */\n            x => {\n                return x.path;\n            })).map((/**\n             * @param {?} x\n             * @return {?}\n             */\n            x => {\n                return x.path;\n            }));\n            /** @type {?} */\n            const slug = this.routeService.toSlug(paths).join('/');\n            return this.getPageBySlug(slug);\n        }\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getPageById(id) {\n        // console.log('PageResolverService.getPageById', id);\n        return this.pageService.getPageById(id).pipe(map((/**\n         * @param {?} page\n         * @return {?}\n         */\n        page => this.pageToPageResolver(page))));\n    }\n    /**\n     * @param {?} slug\n     * @return {?}\n     */\n    getPageBySlug(slug) {\n        // console.log('PageResolverService.getPageBySlug', slug);\n        return this.pageService.getStatePageBySlug(slug).pipe(map((/**\n         * @param {?} page\n         * @return {?}\n         */\n        page => this.pageToPageResolver(page))));\n    }\n}\nPageResolverService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nPageResolverService.ctorParameters = () => [\n    { type: ConfigService },\n    { type: PageService },\n    { type: RouteService }\n];\n/** @nocollapse */ PageResolverService.ngInjectableDef = defineInjectable({ factory: function PageResolverService_Factory() { return new PageResolverService(inject(ConfigService), inject(PageService), inject(RouteService)); }, token: PageResolverService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PageGuard {\n    /**\n     * @private\n     * @param {?} route\n     * @return {?}\n     */\n    match(route) {\n        /** @type {?} */\n        const lastPath = route.url.length ? route.url[route.url.length - 1].path : '';\n        /** @type {?} */\n        const pattern = /\\.([0-9a-z]+)(?:[\\?#]|$)/i;\n        /** @type {?} */\n        const match = (lastPath).match(pattern);\n        if (match !== null) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * @param {?} route\n     * @param {?} state\n     * @return {?}\n     */\n    canActivate(route, state) {\n        return this.match(route);\n    }\n    /**\n     * @param {?} component\n     * @param {?} currentRoute\n     * @param {?} currentState\n     * @param {?=} nextState\n     * @return {?}\n     */\n    canDeactivate(component, currentRoute, currentState, nextState) {\n        return this.match(currentRoute);\n    }\n}\nPageGuard.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StaticGuard {\n    /**\n     * @private\n     * @param {?} route\n     * @return {?}\n     */\n    match(route) {\n        /** @type {?} */\n        const lastPath = route.url[route.url.length - 1].path;\n        // console.log('StaticGuard.CanActivate', e, lastPath);\n        /** @type {?} */\n        const pattern = /\\.([0-9a-z]+)(?:[\\?#]|$)/i;\n        /** @type {?} */\n        const match = (lastPath).match(pattern);\n        if (match !== null) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * @param {?} route\n     * @param {?} state\n     * @return {?}\n     */\n    canActivate(route, state) {\n        return this.match(route);\n    }\n    /**\n     * @param {?} component\n     * @param {?} currentRoute\n     * @param {?} currentState\n     * @param {?=} nextState\n     * @return {?}\n     */\n    canDeactivate(component, currentRoute, currentState, nextState) {\n        return this.match(currentRoute);\n    }\n}\nStaticGuard.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst routes = [\n    { path: 'page/:id', component: PageOutletComponent, resolve: { pageResolver: PageResolverService } },\n    { path: '**', component: PageOutletComponent, resolve: { pageResolver: PageResolverService }, canActivate: [PageGuard] },\n    { path: '**', component: PageNotFoundComponent, canActivate: [StaticGuard] },\n];\nclass PageRouting {\n}\nPageRouting.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    RouterModule.forChild(routes),\n                ],\n                exports: [\n                    RouterModule,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst services = [\n    ConfigService,\n    PageService,\n];\n/** @type {?} */\nconst components = [\n    PageModuleComponent,\n    PageComponent,\n    PageNotFoundComponent,\n    PageOutletComponent,\n    LayoutComponent,\n];\n/** @type {?} */\nconst directives = [\n    UseLayoutDirective\n];\n/** @type {?} */\nconst guards = [\n    PageGuard,\n    StaticGuard,\n];\nclass PageModule {\n    /**\n     * @param {?} parentModule\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('PageModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config) {\n        return {\n            ngModule: PageModule,\n            providers: [{\n                    provide: PAGE_CONFIG, useValue: config\n                }]\n        };\n    }\n}\nPageModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    CoreModule,\n                    PageRouting,\n                ],\n                providers: [\n                    ...services,\n                    ...guards,\n                ],\n                declarations: [\n                    ...components,\n                    ...directives,\n                ],\n                entryComponents: [\n                    ...components,\n                ],\n                exports: [\n                    CoreModule,\n                    PageRouting,\n                    ...components,\n                    ...directives,\n                ],\n            },] }\n];\n/** @nocollapse */\nPageModule.ctorParameters = () => [\n    { type: PageModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ConfigService, PageConfig, PAGE_CONFIG, ILayoutComponent, LayoutComponent, UseLayoutDirective, PageModuleComponent, PageModule, PageRouting, Page, PageIndex, PageMeta, PageRelation, PageNotFoundComponent, PageOutletComponent, PageResolver, PageResolverService, PageComponent, PageGuard, PageService, StaticGuard, LinkService as ɵa };\n"]}